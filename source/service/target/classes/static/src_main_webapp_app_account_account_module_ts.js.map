{"version":3,"file":"src_main_webapp_app_account_account_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/account/account.module.ts","./src/main/webapp/app/account/account.route.ts","./src/main/webapp/app/account/activate/activate.component.ts","./src/main/webapp/app/account/activate/activate.component.html","./src/main/webapp/app/account/activate/activate.route.ts","./src/main/webapp/app/account/activate/activate.service.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.html","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.route.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.component.html","./src/main/webapp/app/account/password-reset/init/password-reset-init.route.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.service.ts","./src/main/webapp/app/account/password/password-strength-bar/password-strength-bar.component.ts","./src/main/webapp/app/account/password/password-strength-bar/password-strength-bar.component.html","./src/main/webapp/app/account/password/password.component.ts","./src/main/webapp/app/account/password/password.component.html","./src/main/webapp/app/account/password/password.route.ts","./src/main/webapp/app/account/password/password.service.ts","./src/main/webapp/app/account/register/register.component.ts","./src/main/webapp/app/account/register/register.component.html","./src/main/webapp/app/account/register/register.route.ts","./src/main/webapp/app/account/register/register.service.ts","./src/main/webapp/app/account/settings/settings.component.ts","./src/main/webapp/app/account/settings/settings.component.html","./src/main/webapp/app/account/settings/settings.route.ts","./src/main/webapp/app/config/error.constants.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PasswordStrengthBarComponent } from './password/password-strength-bar/password-strength-bar.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ActivateComponent } from './activate/activate.component';\nimport { PasswordComponent } from './password/password.component';\nimport { PasswordResetInitComponent } from './password-reset/init/password-reset-init.component';\nimport { PasswordResetFinishComponent } from './password-reset/finish/password-reset-finish.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { accountState } from './account.route';\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(accountState)],\n  declarations: [\n    ActivateComponent,\n    RegisterComponent,\n    PasswordComponent,\n    PasswordStrengthBarComponent,\n    PasswordResetInitComponent,\n    PasswordResetFinishComponent,\n    SettingsComponent,\n  ],\n})\nexport class AccountModule {}\n","import { Routes } from '@angular/router';\n\nimport { activateRoute } from './activate/activate.route';\nimport { passwordRoute } from './password/password.route';\nimport { passwordResetFinishRoute } from './password-reset/finish/password-reset-finish.route';\nimport { passwordResetInitRoute } from './password-reset/init/password-reset-init.route';\nimport { registerRoute } from './register/register.route';\nimport { settingsRoute } from './settings/settings.route';\n\nconst ACCOUNT_ROUTES = [activateRoute, passwordRoute, passwordResetFinishRoute, passwordResetInitRoute, registerRoute, settingsRoute];\n\nexport const accountState: Routes = [\n  {\n    path: '',\n    children: ACCOUNT_ROUTES,\n  },\n];\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ActivateService } from './activate.service';\n\n@Component({\n  selector: 'jhi-activate',\n  templateUrl: './activate.component.html',\n})\nexport class ActivateComponent implements OnInit {\n  error = false;\n  success = false;\n\n  constructor(private activateService: ActivateService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.pipe(mergeMap(params => this.activateService.get(params.key))).subscribe({\n      next: () => (this.success = true),\n      error: () => (this.error = true),\n    });\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1>Activation</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span><strong>Your user account has been activated.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <strong>Your user could not be activated.</strong> Please use the registration form to sign up.\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { ActivateComponent } from './activate.component';\n\nexport const activateRoute: Route = {\n  path: 'activate',\n  component: ActivateComponent,\n  data: {\n    pageTitle: 'Activation',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ActivateService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  get(key: string): Observable<{}> {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/activate'), {\n      params: new HttpParams().set('key', key),\n    });\n  }\n}\n","import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { PasswordResetFinishService } from './password-reset-finish.service';\n\n@Component({\n  selector: 'jhi-password-reset-finish',\n  templateUrl: './password-reset-finish.component.html',\n})\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\n  @ViewChild('newPassword', { static: false })\n  newPassword?: ElementRef;\n\n  initialized = false;\n  doNotMatch = false;\n  error = false;\n  success = false;\n  key = '';\n\n  passwordForm = this.fb.group({\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordResetFinishService: PasswordResetFinishService, private route: ActivatedRoute, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params['key']) {\n        this.key = params['key'];\n      }\n      this.initialized = true;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.newPassword) {\n      this.newPassword.nativeElement.focus();\n    }\n  }\n\n  finishReset(): void {\n    this.doNotMatch = false;\n    this.error = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    const confirmPassword = this.passwordForm.get(['confirmPassword'])!.value;\n\n    if (newPassword !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordResetFinishService.save(this.key, newPassword).subscribe({\n        next: () => (this.success = true),\n        error: () => (this.error = true),\n      });\n    }\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-4\">\n      <h1>Reset password</h1>\n\n      <div class=\"alert alert-danger\" *ngIf=\"initialized && !key\">\n        <strong>The password reset key is missing.</strong>\n      </div>\n\n      <div class=\"alert alert-warning\" *ngIf=\"key && !success\">\n        <span>Choose a new password</span>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <span>Your password couldn't be reset. Remember a password request is only valid for 24 hours.</span>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span><strong>Your password has been reset.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">The password and its confirmation do not match!</div>\n\n      <div *ngIf=\"key && !success\">\n        <form name=\"form\" role=\"form\" (ngSubmit)=\"finishReset()\" [formGroup]=\"passwordForm\">\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"newPassword\">New password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              placeholder=\"New password\"\n              formControlName=\"newPassword\"\n              data-cy=\"resetPassword\"\n              #newPassword\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('newPassword')!.invalid &&\n                (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n              \"\n            >\n              <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.required\">\n                Your password is required.\n              </small>\n\n              <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\">\n                Your password is required to be at least 4 characters.\n              </small>\n\n              <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\">\n                Your password cannot be longer than 50 characters.\n              </small>\n            </div>\n\n            <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"confirmPassword\">New password confirmation</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              placeholder=\"Confirm the new password\"\n              formControlName=\"confirmPassword\"\n              data-cy=\"confirmResetPassword\"\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('confirmPassword')!.invalid &&\n                (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n              \"\n            >\n              <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\">\n                Your password confirmation is required.\n              </small>\n\n              <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\">\n                Your password confirmation is required to be at least 4 characters.\n              </small>\n\n              <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\">\n                Your password confirmation cannot be longer than 50 characters.\n              </small>\n            </div>\n          </div>\n\n          <button type=\"submit\" [disabled]=\"passwordForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Reset Password</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { PasswordResetFinishComponent } from './password-reset-finish.component';\n\nexport const passwordResetFinishRoute: Route = {\n  path: 'reset/finish',\n  component: PasswordResetFinishComponent,\n  data: {\n    pageTitle: 'Password',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetFinishService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(key: string, newPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/finish'), { key, newPassword });\n  }\n}\n","import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { PasswordResetInitService } from './password-reset-init.service';\n\n@Component({\n  selector: 'jhi-password-reset-init',\n  templateUrl: './password-reset-init.component.html',\n})\nexport class PasswordResetInitComponent implements AfterViewInit {\n  @ViewChild('email', { static: false })\n  email?: ElementRef;\n\n  success = false;\n  resetRequestForm = this.fb.group({\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n  });\n\n  constructor(private passwordResetInitService: PasswordResetInitService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.email) {\n      this.email.nativeElement.focus();\n    }\n  }\n\n  requestReset(): void {\n    this.passwordResetInitService.save(this.resetRequestForm.get(['email'])!.value).subscribe(() => (this.success = true));\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1>Reset your password</h1>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <div class=\"alert alert-warning\" *ngIf=\"!success\">\n        <span>Enter the email address you used to register.</span>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span>Check your emails for details on how to reset your password.</span>\n      </div>\n\n      <form *ngIf=\"!success\" name=\"form\" role=\"form\" (ngSubmit)=\"requestReset()\" [formGroup]=\"resetRequestForm\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"emailResetPassword\"\n            #email\n          />\n\n          <div\n            *ngIf=\"\n              resetRequestForm.get('email')!.invalid && (resetRequestForm.get('email')!.dirty || resetRequestForm.get('email')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"resetRequestForm.get('email')?.errors?.required\"> Your email is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"resetRequestForm.get('email')?.errors?.email\"> Your email is invalid. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"resetRequestForm.get('email')?.errors?.minlength\">\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"resetRequestForm.get('email')?.errors?.maxlength\">\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"resetRequestForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Reset</button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { PasswordResetInitComponent } from './password-reset-init.component';\n\nexport const passwordResetInitRoute: Route = {\n  path: 'reset/request',\n  component: PasswordResetInitComponent,\n  data: {\n    pageTitle: 'Password',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetInitService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(mail: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/init'), mail);\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'jhi-password-strength-bar',\n  templateUrl: './password-strength-bar.component.html',\n  styleUrls: ['./password-strength-bar.component.scss'],\n})\nexport class PasswordStrengthBarComponent {\n  colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) {}\n\n  measureStrength(p: string): number {\n    let force = 0;\n    const regex = /[$-/:-?{-~!\"^_`[\\]]/g; // \"\n    const lowerLetters = /[a-z]+/.test(p);\n    const upperLetters = /[A-Z]+/.test(p);\n    const numbers = /\\d+/.test(p);\n    const symbols = regex.test(p);\n\n    const flags = [lowerLetters, upperLetters, numbers, symbols];\n    const passedMatches = flags.filter((isMatchedFlag: boolean) => isMatchedFlag === true).length;\n\n    force += 2 * p.length + (p.length >= 10 ? 1 : 0);\n    force += passedMatches * 10;\n\n    // penalty (short password)\n    force = p.length <= 6 ? Math.min(force, 10) : force;\n\n    // penalty (poor variety of characters)\n    force = passedMatches === 1 ? Math.min(force, 10) : force;\n    force = passedMatches === 2 ? Math.min(force, 20) : force;\n    force = passedMatches === 3 ? Math.min(force, 40) : force;\n\n    return force;\n  }\n\n  getColor(s: number): { idx: number; color: string } {\n    let idx = 0;\n    if (s > 10) {\n      if (s <= 20) {\n        idx = 1;\n      } else if (s <= 30) {\n        idx = 2;\n      } else if (s <= 40) {\n        idx = 3;\n      } else {\n        idx = 4;\n      }\n    }\n    return { idx: idx + 1, color: this.colors[idx] };\n  }\n\n  @Input()\n  set passwordToCheck(password: string) {\n    if (password) {\n      const c = this.getColor(this.measureStrength(password));\n      const element = this.elementRef.nativeElement;\n      if (element.className) {\n        this.renderer.removeClass(element, element.className);\n      }\n      const lis = element.getElementsByTagName('li');\n      for (let i = 0; i < lis.length; i++) {\n        if (i < c.idx) {\n          this.renderer.setStyle(lis[i], 'backgroundColor', c.color);\n        } else {\n          this.renderer.setStyle(lis[i], 'backgroundColor', '#DDD');\n        }\n      }\n    }\n  }\n}\n","<div id=\"strength\">\n  <small>Password strength:</small>\n  <ul id=\"strengthBar\">\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { PasswordService } from './password.service';\n\n@Component({\n  selector: 'jhi-password',\n  templateUrl: './password.component.html',\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = this.fb.group({\n    currentPassword: ['', [Validators.required]],\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe({\n        next: () => (this.success = true),\n        error: () => (this.error = true),\n      });\n    }\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\" *ngIf=\"account$ | async as account\">\n      <h2>\n        Password for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Password changed!</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\"><strong>An error has occurred!</strong> The password could not be changed.</div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">The password and its confirmation do not match!</div>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"changePassword()\" [formGroup]=\"passwordForm\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"currentPassword\">Current password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            placeholder=\"Current password\"\n            formControlName=\"currentPassword\"\n            data-cy=\"currentPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('currentPassword')!.invalid &&\n              (passwordForm.get('currentPassword')!.dirty || passwordForm.get('currentPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('currentPassword')?.errors?.required\">\n              Your password is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"newPassword\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            placeholder=\"New password\"\n            formControlName=\"newPassword\"\n            data-cy=\"newPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('newPassword')!.invalid &&\n              (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.required\">\n              Your password is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\">\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\">\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"confirmPassword\">New password confirmation</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"Confirm the new password\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"confirmPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('confirmPassword')!.invalid &&\n              (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\">\n              Your confirmation password is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\">\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\">\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"passwordForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Save</button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { PasswordComponent } from './password.component';\n\nexport const passwordRoute: Route = {\n  path: 'password',\n  component: PasswordComponent,\n  data: {\n    pageTitle: 'Password',\n  },\n  canActivate: [UserRouteAccessService],\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(newPassword: string, currentPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/change-password'), { currentPassword, newPassword });\n  }\n}\n","import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'jhi-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements AfterViewInit {\n  @ViewChild('login', { static: false })\n  login?: ElementRef;\n\n  doNotMatch = false;\n  error = false;\n  errorEmailExists = false;\n  errorUserExists = false;\n  success = false;\n\n  registerForm = this.fb.group({\n    login: [\n      '',\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    ],\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private registerService: RegisterService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.login) {\n      this.login.nativeElement.focus();\n    }\n  }\n\n  register(): void {\n    this.doNotMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n\n    const password = this.registerForm.get(['password'])!.value;\n    if (password !== this.registerForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      const login = this.registerForm.get(['login'])!.value;\n      const email = this.registerForm.get(['email'])!.value;\n      this.registerService\n        .save({ login, email, password, langKey: 'en' })\n        .subscribe({ next: () => (this.success = true), error: response => this.processError(response) });\n    }\n  }\n\n  private processError(response: HttpErrorResponse): void {\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = true;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 data-cy=\"registerTitle\">Registration</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\"><strong>Registration failed!</strong> Please try again later.</div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorUserExists\">\n        <strong>Login name already registered!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorEmailExists\"><strong>Email is already in use!</strong> Please choose another one.</div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">The password and its confirmation do not match!</div>\n    </div>\n  </div>\n\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"register()\" [formGroup]=\"registerForm\" *ngIf=\"!success\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"login\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"login\"\n            name=\"login\"\n            placeholder=\"Your username\"\n            formControlName=\"login\"\n            data-cy=\"username\"\n            #login\n          />\n\n          <div *ngIf=\"registerForm.get('login')!.invalid && (registerForm.get('login')!.dirty || registerForm.get('login')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('login')?.errors?.required\"> Your username is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('login')?.errors?.minlength\">\n              Your username is required to be at least 1 character.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('login')?.errors?.maxlength\">\n              Your username cannot be longer than 50 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('login')?.errors?.pattern\">\n              Your username can only contain letters and digits.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"registerForm.get('email')!.invalid && (registerForm.get('email')!.dirty || registerForm.get('email')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('email')?.errors?.required\"> Your email is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('email')?.errors?.invalid\"> Your email is invalid. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('email')?.errors?.minlength\">\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('email')?.errors?.maxlength\">\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"password\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"New password\"\n            formControlName=\"password\"\n            data-cy=\"firstPassword\"\n          />\n\n          <div\n            *ngIf=\"registerForm.get('password')!.invalid && (registerForm.get('password')!.dirty || registerForm.get('password')!.touched)\"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('password')?.errors?.required\"> Your password is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('password')?.errors?.minlength\">\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('password')?.errors?.maxlength\">\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"registerForm.get('password')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"confirmPassword\">New password confirmation</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"Confirm the new password\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"secondPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('confirmPassword')!.invalid &&\n              (registerForm.get('confirmPassword')!.dirty || registerForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\">\n              Your confirmation password is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('confirmPassword')?.errors?.minlength\">\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"registerForm.get('confirmPassword')?.errors?.maxlength\">\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"registerForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Register</button>\n      </form>\n\n      <div class=\"mt-3 alert alert-warning\">\n        <span>If you want to </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a\n        ><span\n          >, you can try the default accounts:<br />- Administrator (login=\"admin\" and password=\"admin\") <br />- User (login=\"user\" and\n          password=\"user\").</span\n        >\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { RegisterComponent } from './register.component';\n\nexport const registerRoute: Route = {\n  path: 'register',\n  component: RegisterComponent,\n  data: {\n    pageTitle: 'Registration',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Registration } from './register.model';\n\n@Injectable({ providedIn: 'root' })\nexport class RegisterService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(registration: Registration): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/register'), registration);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\n@Component({\n  selector: 'jhi-settings',\n  templateUrl: './settings.component.html',\n})\nexport class SettingsComponent implements OnInit {\n  account!: Account;\n  success = false;\n  settingsForm = this.fb.group({\n    firstName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    lastName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    email: [undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n  });\n\n  constructor(private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => {\n      if (account) {\n        this.settingsForm.patchValue({\n          firstName: account.firstName,\n          lastName: account.lastName,\n          email: account.email,\n        });\n\n        this.account = account;\n      }\n    });\n  }\n\n  save(): void {\n    this.success = false;\n\n    this.account.firstName = this.settingsForm.get('firstName')!.value;\n    this.account.lastName = this.settingsForm.get('lastName')!.value;\n    this.account.email = this.settingsForm.get('email')!.value;\n\n    this.accountService.save(this.account).subscribe(() => {\n      this.success = true;\n\n      this.accountService.authenticate(this.account);\n    });\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h2 *ngIf=\"account\">\n        User settings for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Settings saved!</strong>\n      </div>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"save()\" [formGroup]=\"settingsForm\" *ngIf=\"account\" novalidate>\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"firstName\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"Your first name\"\n            formControlName=\"firstName\"\n            data-cy=\"firstname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('firstName')!.invalid && (settingsForm.get('firstName')!.dirty || settingsForm.get('firstName')!.touched)\n            \"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('firstName')?.errors?.required\">\n              Your first name is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('firstName')?.errors?.minlength\">\n              Your first name is required to be at least 1 character.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('firstName')?.errors?.maxlength\">\n              Your first name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"lastName\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"Your last name\"\n            formControlName=\"lastName\"\n            data-cy=\"lastname\"\n          />\n\n          <div\n            *ngIf=\"settingsForm.get('lastName')!.invalid && (settingsForm.get('lastName')!.dirty || settingsForm.get('lastName')!.touched)\"\n          >\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('lastName')?.errors?.required\">\n              Your last name is required.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('lastName')?.errors?.minlength\">\n              Your last name is required to be at least 1 character.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('lastName')?.errors?.maxlength\">\n              Your last name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"settingsForm.get('email')!.invalid && (settingsForm.get('email')!.dirty || settingsForm.get('email')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.required\"> Your email is required. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.email\"> Your email is invalid. </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.minlength\">\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small class=\"form-text text-danger\" *ngIf=\"settingsForm.get('email')?.errors?.maxlength\">\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"settingsForm.invalid\" class=\"btn btn-primary\" data-cy=\"submit\">Save</button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { SettingsComponent } from './settings.component';\n\nexport const settingsRoute: Route = {\n  path: 'settings',\n  component: SettingsComponent,\n  data: {\n    pageTitle: 'Settings',\n  },\n  canActivate: [UserRouteAccessService],\n};\n","export const PROBLEM_BASE_URL = 'https://www.jhipster.tech/problem';\nexport const EMAIL_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/email-already-used`;\nexport const LOGIN_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/login-already-used`;\n"],"names":["Validators","i0","ctx_r15","PasswordComponent","constructor","passwordService","accountService","fb","group","currentPassword","required","newPassword","minLength","maxLength","confirmPassword","ngOnInit","account$","identity","changePassword","error","success","doNotMatch","passwordForm","get","value","save","subscribe","next","selectors","decls","vars","consts","template"],"sourceRoot":"webpack:///"}